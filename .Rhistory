area = bind_rows(area, nearby_areas),
year = 2021,
request_type = .x,
trim = TRUE
)
) %>%
filter(
# Filter to requests created in past 6 months
created_date >= (lubridate::ymd(Sys.Date()) - lubridate::dmonths(months_prior))
) %>%
mutate(
# Remove agency prefix for service request type
sr_type = str_remove(sr_type, "(HCD-)|(SW-)")
)
# Filtering requests by attribute only works if the area type is neighborhood, council district, or police district
# Using "area_requests" will only call the requests within the chosen neighborhood.
# Using "requests" will call the requests within the chosen neighborhood, AND the requests from the nearby areas combined.
if (params$area_type == "neighborhood") {
requests <- requests %>%
filter(neighborhood %in% c(params$area_name, nearby_areas$name))
area_requests <- requests %>%
filter(neighborhood %in% params$area_name)
nearby_area_requests <- requests %>%
filter(neighborhood %in% nearby_areas$name)
} else if (params$area_type == "council district") {
requests <- requests %>%
filter(council_district %in% c(params$area_name, nearby_areas$name))
area_requests <- requests %>%
filter(council_district %in% params$area_name)
nearby_area_requests <- requests %>%
filter(council_district %in% nearby_areas$name)
} else if (params$area_type == "police district") {
requests <- requests %>%
filter(police_district %in% c(params$area_name, nearby_areas$name))
area_requests <- requests %>%
filter(police_district %in% params$area_name)
nearby_area_requests <- requests %>%
filter(police_district %in% nearby_areas$name)
}
# YYYY-MM-DD format required for get_area_citations start_date parameter
start_date <- paste0(params$year_start, "-01-01")
possible_get_area__citations <-
purrr::possibly(
.f = get_area_citations,
otherwise = NULL
)
if (params$area_type %in% c("neighborhood", "council district", "police district")) {
citations <-
purrr::map_dfr(
c(params$area_name, nearby_areas$name),
~ possible_get_area__citations(
area_type = params$area_type,
area_name = .x,
description = "TRASH",
start_date = start_date
)
)
#--------------------------------------------------------------
#-------------------------------------------------------------
citations <- citations %>%
# Pull street number (address), block number, and street name from location
mutate(
street_number = readr::parse_number(violation_location),
block_number = floor(street_number / 100) * 100,
street_name = str_trim(str_remove(violation_location, glue::glue("^{street_number}|^0{street_number}"))),
citation_status = case_when(
citation_status == "A" ~ "Appealed",
citation_status == "O" ~ "Open",
citation_status == "P" ~ "Paid",
citation_status == "V" ~ "Voided", # TODO: Should voided citations be excluded?
),
# Fixes one typo where "Accumulation" was spelled with two I's.
description = replace(
description, description == "TRASH ACCUMULATIION", "TRASH ACCUMULATION"
),
# Changes spelling of Description
description = case_when(
description == "BULK TRASH" ~ "Bulk Trash",
description == "EXTERIOR SANITARY MAINTENANCE - TRASH, GARBAGE AND DEBRIS" ~ "Exterior Sanitary Maintenance",
description == "SANITARY MAINTENANCE - OCCUPANT TRASH DISPOSAL" ~ "Trash Disposal",
description == "TRASH ACCUMULATION" ~ "Trash Accumulation"
)
)
# TODO: Decide if limiting citation data to last 6 months (or 12 months) is helpful in simplifying the analysis or presentation of the analysis
recent_citations <- citations %>%
filter(
violation_date >= (lubridate::ymd(Sys.Date()) - lubridate::dmonths(months_prior))
)
}
# Use "area_citations" to use citations that are in the selected neighborhood ONLY.
# Using the variable "citations" will include the neighborhood citations, and the nearby areas' citations combined
if (params$area_type == "neighborhood") {
area_citations <- citations %>%
filter(neighborhood %in% params$area_name)
nearby_citations <- citations %>%
filter(neighborhood %in% nearby_areas$name)
} else if (params$area_type == "council district") {
area_citations <- citations %>%
filter(council_district %in% params$area_name)
nearby_citations <- citations %>%
filter(council_district %in% nearby_areas$name)
} else if (params$area_type == "police district") {
area_citations <- citations %>%
filter(police_district %in% params$area_name)
nearby_citations <- citations %>%
filter(police_district %in% nearby_areas$name)
}
citations <- citations %>%
mutate(
nearby = if_else(
citation_no %in% nearby_citations$citation_no,
"Nearby areas",
area_label
)
)
citations_source <- "Source: Environmental Control Board (ECB) Citations/Open Baltimore"
# calls the selected area
area_property <-
get_area_property(area = area, crop = TRUE)
# Combines the block number with the street name
area_property <- area_property %>%
mutate(
block_number = floor(bldg_num / 100) * 100,
street_block_number = paste(block_number, street_dirpre, street_name, street_type)
)
blocks <- area_property %>%
group_by(block) %>%
summarise(
geometry = st_union(geometry)
)
# Creates new spatial data with unioned blocks
street_blocks <- area_property %>%
group_by(street_block_number) %>%
summarise(
geometry = st_union(geometry)
)
#Creates map of Baltimore City.
city_map <- ggplot() +
geom_sf(data = baltimore_city, fill = "grey") +
geom_sf(data = neighborhoods, fill = NA, color = "black") +
geom_sf(data = area, fill = "red", color = "red") +
geom_sf(data = baltimore_city, size = 1, color = "black", fill = NA) +
ggtitle("Baltimore City") +
theme_void()
#Creates map of neighborhood.
area_map <- ggplot() +
layer_area_data(area = area, data = parks, fill = "forestgreen", alpha = 0.8) +
geom_sf(data = blocks, fill = NA, color = "black") +        #Blocks layer
geom_sf(data = area, color = "black", size = 1, fill = NA) +
theme_void() +
labs(
title = params$area_name
)
#displays maps
city_map + area_map
#Creates map of service requests colored by request type
area_requests %>%
ggplot() +
layer_area_data(area = area, data = parks, fill = "forestgreen", alpha = 0.8) +
geom_sf(data = blocks, fill = NA, color = "black") +        #Blocks layer
geom_sf(data = area, color = "black", size = 1.25, fill = NA) +  #Neighborhood outline layer
geom_sf(aes(color = sr_type)) +
theme_void() +
labs(
title = glue::glue("Service Requests by type in {area_label}"),
color = "Service Request Type"
)
#Counts the total number of area requests
total_requests <- nrow(area_requests)
#Plots the service requests types in the chosen area
area_requests %>%
st_drop_geometry() %>%
count(sr_type, sort = TRUE) %>%
ggplot() +
geom_col(aes(x = reorder(sr_type, n), y = n, fill = sr_type), show.legend = FALSE) +
xlab("Request Type") +
ylab("Total Requests") +
labs(
title = glue::glue("Service Requests in {area_label}"),
fill = "Request Type"
)
#Maps the area citations
area_citations %>%
ggplot() +
layer_area_data(area = area, data = parks, fill = "forestgreen", alpha = 0.8) +
geom_sf(data = blocks, fill = NA, color = "black") +        #Blocks layer
geom_sf(data = area, color = "black", size = 1.25, fill = NA) +  #Neighborhood outline layer
geom_sf(aes(color = description)) +
area_layer +
theme_void() +
labs(
color = "Description",
title = glue::glue("ECB Citations in {area_label}"),
caption = citations_source
)
#Counts the total number of area citations
total_citations <- nrow(area_citations)
#Plots the citation types in the chosen area
# FIXME: How to modify the x-axis marks to make them look like the map's legend?
area_citations %>%
st_drop_geometry() %>%
count(description, sort = TRUE) %>%
ggplot() +
geom_col(aes(x = reorder(description, n), y = n, fill = description), show.legend = FALSE) +
ggtitle("ECB Citations") +
xlab("Citation Type") +
ylab("Total Citations") +
labs(
title = glue::glue("ECB Citations in {area_label}"),
fill = "Citation Type",
caption = citations_source
)
street_blocks %>%
ggplot() +
layer_area_data(area = area, data = parks, fill = "forestgreen", alpha = 0.8) +
geom_sf(data = area, color = "black", size = 1.25, fill = NA) +  #Neighborhood outline layer
geom_sf(fill = NA, aes(color = street_block_number)) +
geom_sf_label(aes(label = street_block_number), size = 1) +
guides(color = "none") +
theme_void() +
labs(
title = glue::glue("Numbered blocks in {area_label}")
)
block_street_count <- citations %>%
sf::st_drop_geometry() %>%
count(street_name, block_number, name = "count", sort = TRUE) %>%
relocate(block_number, .before = street_name)
block_street_count %>%
slice_head(n = 10) %>%
gt() %>%
tab_header(
title = glue::glue("10 blocks in {area_label} with most citations since {params$year_start}")
) %>%
cols_label(
block_number = "Block",
street_name = "Street",
count = "Citations"
) %>%
tab_source_note(
citations_source
)
# Rank of requests in area
request_comparison_table <- requests %>%
sf::st_drop_geometry() %>%
mutate(
nearby = if_else(
service_request_num %in% nearby_area_requests$service_request_num,
"Nearby areas",
as.character(knitr::combine_words(area$name))
)
) %>%
select(nearby, sr_type, sr_status, days_to_close) %>%
gtsummary::tbl_summary(
by = "nearby",
label = list(
sr_type = "Request type",
sr_status = "Current status",
days_to_close = "Days to close request"
)
) %>%
gtsummary::as_gt() %>%
tab_source_note(
source_note = glue::glue("Nearby areas include {knitr::combine_words(nearby_areas$name)}.")
) %>%
tab_header(
title = glue::glue("Service requests in {knitr::combine_words(area$name)} and nearby areas")
)
request_comparison_table
area_citations %>%
ggplot() +
geom_freqpoly(aes(x = violation_date, color = description)) +
xlab("Date") +
ylab("Total Citations") +
labs(
title = glue::glue("Citations Over Time in {area_label}"),
color = "Citation Types"
)
citations %>%
ggplot() +
geom_freqpoly(aes(x = violation_date, color = description)) +
ggtitle("Citations Over Time in Nearby Areas") +
xlab("Date") +
ylab("Total Citations") +
labs(
color = "Citation Types"
)
#Table of the top 10 areas with the least number of Citations in the area
block_street_count %>%
slice_tail(n = 10) %>% #THIS LINE GETS THE BOTTOM VALUES OF THE TABLE
gt() %>%
tab_header(
title = glue::glue("10 blocks in {area_label} with the least citations since {params$year_start}")
) %>%
cols_label(
block_number = "Block",
street_name = "Street",
count = "Citations"
) %>%
tab_source_note(
citations_source
)
area_citations %>%
filter(citation_status == "Open") %>% #Filters all other types of citation status except Open
ggplot() +
layer_area_data(area = area, data = parks, fill = "forestgreen", alpha = 0.8) +
geom_sf(data = blocks, fill = NA, color = "black") +        #Blocks layer
geom_sf(data = area, color = "black", size = 1.25, fill = NA) +  #Neighborhood outline layer
geom_sf(aes(color = citation_status)) +
theme_void() +
labs(
title = glue::glue("Unpaid Citations in {area_label}"),
caption = citations_source,
color = "Citation Status"
)
View(citations)
View(citations)
View(area_citations)
View(recent_citations)
View(nearby_citations)
View(requests)
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE,
error = FALSE,
cache = FALSE)
library(sf)
library(mapbaltimore)
library(ggplot2)
library(dplyr)
library(stringr)
library(lubridate)
library(patchwork)
library(gt)
# Call scripts for get_area, get_requests, get_citations, and get_area_block
knitr::read_chunk("misc.R")
# Set default theme
prototype_theme <- theme_minimal() %+replace%
theme(
axis.line = element_line(color = "black"),
axis.title = element_text(size = 13),
axis.text = element_text(face = "bold"),
axis.ticks = element_line(colour = "black", size = 1),
legend.title = element_text(face = "bold", hjust = 0),
legend.text = element_text(size = 11)
)
theme_set(prototype_theme)
#Modify bar plots
update_geom_defaults("col", list(alpha = 0.6))
area <- get_area(
params$area_type,
params$area_name
)
nearby_areas <- get_nearby_areas(area, type = params$area_type)
if (is.null(params$area_label)) {
area_label <- as.character(knitr::combine_words(params$area_name))
} else {
area_label <- params$area_label
}
area_layer <- geom_sf(data = area, fill = NA, color = "black", linetype = "dashed")
months_prior <- 6
# Define list of trash-related request types
select_request_types <-
c(
"HCD-Sanitation Property",
"HCD-Illegal Dumping",
"SW-Dirty Street",
"SW-Dirty Alley"
)
# Additional trash-related request types with limited use based on testing
# c("SW-Municipal Trash Can Concern", "SW-Municipal Trash Can Stolen/Lost", "SW-Public (Corner) Trash Can Issue",
#  "SW-Public (Corner) Trash Can Request/Removal", "SW-Trash Can/Recycling Container Complaint", "SW-Park Cans")
possible_get_area_requests <-
purrr::possibly(
.f = get_area_requests,
otherwise = NULL
)
# Get 2021 requests of each type
requests <-
purrr::map_dfr(
select_request_types,
~ possible_get_area_requests(
area = bind_rows(area, nearby_areas),
year = 2021,
request_type = .x,
trim = TRUE
)
) %>%
filter(
# Filter to requests created in past 6 months
created_date >= (lubridate::ymd(Sys.Date()) - lubridate::dmonths(months_prior))
) %>%
mutate(
# Remove agency prefix for service request type
sr_type = str_remove(sr_type, "(HCD-)|(SW-)")
)
# Filtering requests by attribute only works if the area type is neighborhood, council district, or police district
# Using "area_requests" will only call the requests within the chosen neighborhood.
# Using "requests" will call the requests within the chosen neighborhood, AND the requests from the nearby areas combined.
if (params$area_type == "neighborhood") {
requests <- requests %>%
filter(neighborhood %in% c(params$area_name, nearby_areas$name))
area_requests <- requests %>%
filter(neighborhood %in% params$area_name)
nearby_area_requests <- requests %>%
filter(neighborhood %in% nearby_areas$name)
} else if (params$area_type == "council district") {
requests <- requests %>%
filter(council_district %in% c(params$area_name, nearby_areas$name))
area_requests <- requests %>%
filter(council_district %in% params$area_name)
nearby_area_requests <- requests %>%
filter(council_district %in% nearby_areas$name)
} else if (params$area_type == "police district") {
requests <- requests %>%
filter(police_district %in% c(params$area_name, nearby_areas$name))
area_requests <- requests %>%
filter(police_district %in% params$area_name)
nearby_area_requests <- requests %>%
filter(police_district %in% nearby_areas$name)
}
# YYYY-MM-DD format required for get_area_citations start_date parameter
start_date <- paste0(params$year_start, "-01-01")
possible_get_area__citations <-
purrr::possibly(
.f = get_area_citations,
otherwise = NULL
)
if (params$area_type %in% c("neighborhood", "council district", "police district")) {
citations <-
purrr::map_dfr(
c(params$area_name, nearby_areas$name),
~ possible_get_area__citations(
area_type = params$area_type,
area_name = .x,
description = "TRASH",
start_date = start_date
)
)
#--------------------------------------------------------------
#-------------------------------------------------------------
citations <- citations %>%
# Pull street number (address), block number, and street name from location
mutate(
street_number = readr::parse_number(violation_location),
block_number = floor(street_number / 100) * 100,
street_name = str_trim(str_remove(violation_location, glue::glue("^{street_number}|^0{street_number}"))),
citation_status = case_when(
citation_status == "A" ~ "Appealed",
citation_status == "O" ~ "Open",
citation_status == "P" ~ "Paid",
citation_status == "V" ~ "Voided", # TODO: Should voided citations be excluded?
),
# Fixes one typo where "Accumulation" was spelled with two I's.
description = replace(
description, description == "TRASH ACCUMULATIION", "TRASH ACCUMULATION"
),
# Changes spelling of Description
description = case_when(
description == "BULK TRASH" ~ "Bulk Trash",
description == "EXTERIOR SANITARY MAINTENANCE - TRASH, GARBAGE AND DEBRIS" ~ "Exterior Sanitary Maintenance",
description == "SANITARY MAINTENANCE - OCCUPANT TRASH DISPOSAL" ~ "Trash Disposal",
description == "TRASH ACCUMULATION" ~ "Trash Accumulation"
)
)
# TODO: Decide if limiting citation data to last 6 months (or 12 months) is helpful in simplifying the analysis or presentation of the analysis
recent_citations <- citations %>%
filter(
violation_date >= (lubridate::ymd(Sys.Date()) - lubridate::dmonths(months_prior))
)
}
rlang::last_error()
rlang::last_trace(
rlang::last_trace()
rlang::last_error()
rlang::last_trace()
pandoc_version()
version
source("C:/Users/germa/Desktop/SummerProject/baltimoretrash_2021/R/misc.R")
update
update()
View(citations)
View(citations)
View(area_citations)
View(area_citations)
View(requests)
View(requests)
View(area_requests)
library(shiny); runApp('C:/Users/germa/Desktop/Fall_Semester_Prototype/Prototype2.R')
setwd("C:/Users/germa/Desktop/Fall_Semester_Prototype")
runApp('Prototype2.R')
runApp('Prototype2.R')
runApp('Prototype2.R')
runApp('Prototype2.R')
runApp('Prototype2.R')
runApp('Prototype2.R')
runApp('C:/Users/germa/Desktop/Semester Project/Baltimore_Trash_Info')
runApp('Prototype2.R')
runApp('Prototype2.R')
runApp('Prototype2.R')
runApp('Prototype2.R')
runApp('Prototype2.R')
runApp('Prototype2.R')
??addCircleMarkers
runApp('Prototype2.R')
runApp('Prototype2.R')
runApp('Prototype2.R')
runApp('Prototype2.R')
runApp('Prototype2.R')
runApp('Prototype2.R')
??palette
runApp('Prototype2.R')
runApp('Prototype2.R')
